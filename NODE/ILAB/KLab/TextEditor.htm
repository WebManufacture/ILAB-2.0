<!DOCTYPE html>
<html manifest="http://system.web-manufacture.net/TextEditor.manifest">
<head>
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <link type='text/css' rel='stylesheet' href="http://Services.web-manufacture.net/Styles/System.default.css" />
    <script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Utils.js"></script>
    <script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/DOM.js"></script>
    <script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Events.js"></script>
    <script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Log.js"></script>
    <script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Url.js"></script>
    <script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Ajax.js"></script>
	<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Net.js"></script>
    <script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Jasp.js"></script>
    <script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Modules.js"></script>
	<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Node.js"></script>
    <script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/NodeTunnel.js"></script>
    <script type="text/javascript" src="http://services.web-manufacture.net/External/CodeMirror-3.0/lib/CodeMirror.js"></script>
    <link rel="stylesheet" href="http://services.web-manufacture.net/External/CodeMirror-3.0/lib/codemirror.css" />
    <script src="http://services.web-manufacture.net/External/CodeMirror-3.0/addon/search/search.js"></script>
    <script src="http://services.web-manufacture.net/External/CodeMirror-3.0/addon/search/searchcursor.js"></script>
    <script src="http://services.web-manufacture.net/External/CodeMirror-3.0/addon/search/match-highlighter.js"></script>
    <script src="http://services.web-manufacture.net/External/CodeMirror-3.0/addon/hint/show-hint.js"></script>
    <script src="http://services.web-manufacture.net/External/CodeMirror-3.0/addon/hint/javascript-hint.js"></script>
    <link rel="stylesheet" href="http://services.web-manufacture.net/External/CodeMirror-3.0/addon/hint/show-hint.css" />
    <script src="http://services.web-manufacture.net/External/CodeMirror-3.0/addon/edit/closetag.js"></script>
    <script src="http://services.web-manufacture.net/External/CodeMirror-3.0/addon/edit/matchbrackets.js"></script>
    <script src="http://services.web-manufacture.net/External/CodeMirror-3.0/addon/fold/foldcode.js"></script>
	<script src="http://services.web-manufacture.net/External/CodeMirror-3.0/mode/cslike/cslike.js"></script>
    <script src="http://services.web-manufacture.net/External/CodeMirror-3.0/mode/javascript/javascript.js"></script>
    <script src="http://services.web-manufacture.net/External/CodeMirror-3.0/mode/htmlmixed/htmlmixed.js"></script>
    <script src="http://services.web-manufacture.net/External/CodeMirror-3.0/mode/css/css.js"></script>
    <script src="http://services.web-manufacture.net/External/CodeMirror-3.0/mode/xml/xml.js"></script>
    <script type="text/javascript" key="TextEditor">

        Notify = {};

        Notify.Show = function(message) {
            var nf = DOM("#Notify");
            var ev = nf.div(".event.first", (new Date()).formatTime() + " " + message);
            nf.show();
            nf.ins(ev);
            Notify.setTimeout();
        };

        Notify.Error = function(error) {
            var nf = DOM("#Notify");
            var ev = nf.div(".event.error.first", (new Date()).formatTime() + " " + error);
            nf.show();
            nf.ins(ev);
            Notify.setTimeout();
        };

        Notify.setTimeout = function() {
            if (Notify.timeout) {
                window.clearTimeout(Notify.timeout);
            }
            Notify.timeout = window.setTimeout(Notify.clearFirst, 3000);
        };

        Notify.clearFirst = function() {
            DOM.all("#Notify .event.first").del(".first");
        };

        function XH() {
            var xmlhttp;
            xmlhttp = new XMLHttpRequest();
            return xmlhttp;
        };

        Editor = {};

        Editor.Init = function() {
            var url = null;
            Editor.fileName = null;
            var req = XH();
            if (Request.Params.url) {
                Editor.fileName = Request.Params.url;
                url = Request.GetUrl(Editor.fileName);
                DOM("#urlBar").value = url;
            }
            if (Request.Params.file) {
                url = Editor.fileName = Request.Params.file;
                if (Request.Params.UserDomain) {
                    url = "http://" + Request.Params.UserDomain + "/System.Handler.ashx?action=get&file=" + url;
                    if (Request.Params.SystemPath) {
                        url += "&path=" + Request.Params.SystemPath;
                    }
                }
                else {
                    if (Request.Params.SystemPath) {
                        url = Request.Params.SystemPath + "/" + url;
                    }
                }
                DOM("#urlBar").value = url;
                if (url.contains("?")) {
                    url += "&rnd=" + Math.random();
                }
                else {
                    url += "?rnd=" + Math.random();
                }
            }
            if (!url) {
                url = location.pathname;
                var paths = Url.Resolve(url).path;
                Editor.fileName = paths[paths.length - 1];
                DOM("#urlBar").value = Request.GetUrl(Editor.fileName);
            };
            Editor.HistoryKey = 'dateArray_' + url;
            window.onkeypress = Editor.KeyHandler;

            Editor.Reload();
            CodeMirror.commands.autocomplete = function(cm) {
                CodeMirror.simpleHint(cm, CodeMirror.javascriptHint);
            }
        };

        Editor.GoUrl = function(url, key) {
            if (url) {
				if (key){
					Net.POST(url, '',function(result){
						Notify.Show(result);
					});
				}
				else{
					Net.get(url, function(result){
						Notify.Show(result);
					});
				}
            }
        };

        Editor.GoUrlAll = function(url, key) {
            if (url) {
                if (key){
					var channel = new HttpChannel(url, false);
					channel.onRead.subscribe(function(result){
						Notify.Show(result);
					});
				}
				else{
					var channel = new HttpChannel(url, true);
					channel.onRead.subscribe(function(result){
						Notify.Show(JSON.stringify(result));
					});
				}
            }
        };

        Editor.LoadFileComplete = function(result) {
            result = this.responseText;
            var parsers = "";
            DOM(".menuitem.reload").del(".disabled");
            var header = this.getResponseHeader("Content-Type");
			var server = Editor.Server = {};
			server.ServerUrl = this.getResponseHeader("ServerUrl");
			server.ManageUrl = this.getResponseHeader("ManageUrl");
			server.NodeType = this.getResponseHeader("NodeType");
			server.NodeId = this.getResponseHeader("NodeId");
            if (header != null) {
                if (header.Contains(["text/html", "text/htm"])) {
                    parsers = "text/html";
                }
                if (header.Contains(["text/javascript", "application/javascript", "application/x-javascript", "text/js", "text/json", "application/json"])) {
                    parsers = "javascript";
                }
                if (header.Contains("text/css")) {
                    parsers = "css";
                }
                if (header.Contains("text/xml")) {
                    parsers = "xml";
                }
				if (header.Contains("text/plain")) {
                    parsers = "text/x-csharp";
                }
            }


            Editor.TextEditor = CodeMirror(WS.Body, {
                mode: parsers,
                indentUnit: 4,
                wordWrap: true,
                indentWithTabs: true,
                smartIndent: true,
                lineNumbers: true,
                matchBrackets: true,
                highlightSelectionMatches: true,
                autoCloseTags: true,
                electricChars: true,
                extraKeys: {
                    "Ctrl-Space": "autocomplete"
                }
            });

            /*Editor.TextEditor.on("cursorActivity", function() {
            Editor.TextEditor.matchHighlight("CodeMirror-matchhighlight");
            });*/

            Editor.TextEditor.setValue(this.responseText);
            var title = WS.Header.add("<title>" + Editor.fileName + "</title>");
        };

        Editor.Reload = function() {
            var url = null;
            var req = XH();
            ServerTool.GetServerStatus();
            if (Request.Params.url) {
                url = Request.GetUrl(Request.Params.url, { AsText: true, rnd: Math.random() });
                var paths = Url.Resolve(url);
                Editor.fileName = paths.path[paths.path.length - 1];
            }
            if (Request.Params.file) {
                url = Editor.fileName = Request.Params.file;
                if (Request.Params.UserDomain) {
                    url = "http://" + Request.Params.UserDomain + "/System.Handler.ashx?action=get&file=" + url;
                    if (Request.Params.SystemPath) {
                        url += "&path=" + Request.Params.SystemPath;
                    }
                }
                else {
                    if (Request.Params.SystemPath) {
                        url = Request.Params.SystemPath + "/" + url;
                    }
                }
                if (url.contains("?")) {
                    url += "&rnd=" + Math.random();
                }
                else {
                    url += "?rnd=" + Math.random();
                }
            }
            if (!url) {
                url = location.pathname;
                var paths = Url.Resolve(url);
                Editor.fileName = paths.path[paths.path.length - 1];
            }
            DOM(".menuitem.reload").add(".disabled");
            req.open("GET", url, true);
            if (Editor.TextEditor) {
                req.onload = Editor.ReloadEnd;
            }
            else {
                req.onload = Editor.LoadFileComplete;
            }
            req.send(null);
        };

        Editor.ReloadEnd = function() {
            if (this.status == 200) {
                Editor.TextEditor.setValue(this.responseText);
                Notify.Show("Reloaded");
            }
            else {
                Notify.Error("Нет связи: " + this.status);
            }
            DOM(".menuitem.reload").del(".disabled");
        };

        Editor.GetFileUrl = function() {
            if (Request.Params.url) {
                return Request.Params.url;
            }
            if (Request.Params.UserDomain) {
                if (Request.Params.SystemPath) {
                    return "http://" + Request.Params.UserDomain + "/" + Request.Params.SystemPath + "/" + Editor.fileName;
                }
                else {
                    return "http://" + Request.Params.UserDomain + "/" + Editor.fileName;
                }
            }
            else {
                if (Request.Params.SystemPath) {
                    return "/" + Request.Params.SystemPath + "/" + Editor.fileName;
                }
                else {
                    return Editor.fileName;
                }
            }
        };

        Editor.SaveFile = function() {
            if (Editor.SaveInProgress && Editor.SaveRequest) {
                Editor.SaveRequest.abort();
                return;
            }
            Editor.SaveInProgress = true;
            DOM(".menuitem.save").add(".disabled");
            var content = Editor.TextEditor.getValue();

            //код local storage
			/*var keyArray = [];
            var key1 = Editor.HistoryKey;
            var str = window.localStorage.getItem(key1);
            var i = 0;
            // if (str != null){
            if (str) {
                keyArray = str.split(",");
                i = keyArray.length;
            }

            if (i >= 20) { keyArray.shift(); i--; }

            var now = new Date();
            now = now.valueOf();

            keyArray[i] = now;
            var str = keyArray.join(",");
            window.localStorage.setItem(key1, str); //должна быть строка
            var key2 = (now + '_' + Request.Params.UserDomain + "/" + Request.Params.SystemPath + "/" + Editor.fileName);
            window.localStorage.setItem(key2, content);
			*/
            var req = XH();
            var url = "";

            if (Request.Params.url) {
                url = Request.GetUrl(Request.Params.url);
                req.open("POST", url, true);
            }
            else {
                if (Request.Params.file) {
                    url = Request.Params.file;
                    if (Request.Params.UserDomain) {
                        url = "http://" + Request.Params.UserDomain + "/System.Handler.ashx?action=save&file=" + url;
                        if (Request.Params.SystemPath) {
                            url += "&path=" + Request.Params.SystemPath;
                        }
                    }
                    else {
                        url = "/System.Handler.ashx?action=save&file=" + url;
                        if (Request.Params.SystemPath) {
                            url += "&path=" + Request.Params.SystemPath;
                        }
                    }
                    req.open("POST", url, true);
                }
                else {
                    url = location.pathname;
                    req.open("POST", url, true);
                }
            }
            req.setRequestHeader("Content-Type", "text/plain");
            req.onload = Editor.SaveComplete;
            req.onerror = Editor.SaveError;
            req.send(content);
            Editor.SaveRequest = req;
        };

        Editor.SaveError = function() {
            Notify.Error("Ошибка сохранения!");
            DOM.get(".menuitem.save").del(".disabled");
            Editor.SaveInProgress = false;
        };

        Editor.ShowHistory = function() {
            //--------------------------------
            var vh = DOM.get("#VersionHistory"); //ссылка на див со списком сохранений
            vh.del(".invisible");
            vh.clear(); //.innerHTML = "";
            var keyArray = [];
            var str = window.localStorage.getItem(Editor.HistoryKey);
            if (str) {
                keyArray = str.split(",");
            }

            for (var j = 0; j < keyArray.length; j++) {
                var saveDate = new Date(parseInt(keyArray[j]));
                if (isNaN(saveDate)) continue;
                var key2 = (keyArray[j] + '_' + Request.Params.UserDomain + "/" + Request.Params.SystemPath + "/" + Editor.fileName);
                var divST = vh.div(".saveTime.keyAr", saveDate.formatDateRus(".") + " " + saveDate.formatTime(".") + "    " + key2);
                divST.Key2 = key2;
                divST.onclick = Editor.LoadHistory;
                //var h=keyArray[j].getHours();
                //var h1=setHours(h);
                //var m=keyArray[j].getMinutes();
                //var m1=setMinutes(m);
                //var s=keyArray[j].getSeconds();
                //var s1=setSeconds(s);
                //var sTime= (h1 + ":" + m1 + ":" + s1);

                //divST.set(null, sTime);
                //divST.add(".keyAr");
                //divST.onclick = Editor.LoadHistory;

                //divST.saveDate = keyArray[j];				
            }
        };


        Editor.LoadHistory = function() {
            //this.saveDate;


            //var dte = new Date("129123934123");
            var content = window.localStorage.getItem(this.Key2);
            Editor.TextEditor.setValue(content);
            Notify.Show("Reloaded fom cache");
        };

        Editor.SaveComplete = function() {
            var status = DOM.get(".header .status");
            var div = DOM.div(null, this.responseText);
            Notify.Show("Сохранено");
            DOM.get(".menuitem.save").del(".disabled");
            Editor.SaveInProgress = false;
        };

        Editor.RunFile = function() {
            if (Request.Params.url) {
                window.open(Request.GetUrl(Request.Params.url));
                return;
            }
			if (Request.Params.file){
				var url = Request.Params.file;
				if (Request.Params.SystemPath) {
					url = Request.Params.SystemPath + "/" + url;
				}
				if (Request.Params.UserDomain) {
					url = "http://" + Request.Params.UserDomain + "/" + url;
				}
				window.open(url);
			}
			var url = new Url(window.location);
			url.search = "";
			window.open(url);
        };

        Editor.OpenLogWindow = function() {
            //alert('окно отладчика открывает '+ Request.Params.url);
            var logWindowUrl = window.location.protocol + '//' + window.location.host + '/Monitoring.htm?url=' + encodeURIComponent(Request.Params.url);
            window.open(logWindowUrl);
            return;
        };


        Editor.TextReindentAll = function() {
            this.TextEditor.reindent();
        };

        Editor.KeyHandler = function(event) {
            // Ctrl + S event;
            if (event.ctrlKey && event.charCode == 115) {
                Editor.SaveFile();
                event.stopPropagation();
                event.preventDefault();
                return false;
            }
            if (event.ctrlKey && event.charCode == 104) {
                DOM("#hkHint").show();
                return false;
            }
            return true;
        };

        WS.DOMload(function() {
            ServerTool = DOM("#ServerToolBtn");

            ServerTool.AttrClassProperty("status");

            ServerTool.onclick = function() {
                if (ServerTool.is('.inited') && !ServerTool.is('.error')) {
                    if (ServerTool.is('.exited')) {
                        ServerTool.Start();
                    } else {
                        ServerTool.Stop();
                    };
                };
            };

            ServerTool.Init = function() {
                ServerTool.urlParse();
                ServerTool.Server = new NodeTunnel(ServerTool.urlToLogFile);
                if (ServerTool.Server) {
                    ServerTool.cls("inited");
                    ServerTool.GetServerStatus();
                    //window.setInterval(ServerTool.GetServerStatus, 3000);
                };
            };

            ServerTool.Start = function() {
                if (Request.Params.url && ServerTool.Server) {
                    ServerTool.Server.run(Request.Params.url, ServerTool.ServerStatus);
                    return;
                };
            };

            ServerTool.Stop = function() {
                if (Request.Params.url && ServerTool.Server) {
                    ServerTool.Server.stop(Request.Params.url, ServerTool.ServerStatus);
                    return;
                };
            };

            ServerTool.urlParse = function() {
                var startedServerUrl = Request.Params.url;
                var startedServerUrlObj = new Url(startedServerUrl);
                ServerTool.urlToLogFile = startedServerUrlObj.protocol + '//' + 'logs.' + startedServerUrlObj.host + '/_' + startedServerUrlObj.path + '.log';
            };

            ServerTool.GetServerStatus = function() {
                if (Request.Params.url && ServerTool.Server) {
                    ServerTool.Server.status(Request.Params.url, ServerTool.ServerStatus);
                };
            };

            ServerTool.ServerStatus = function(result, status) {
                if (status == 200) {
                    result = JSON.parse(result);
                    if (ServerTool.status != result.status) {
                        ServerTool.status = result.status;
                        return;
                    };
                } else {
                    ServerTool.status = 'error';
                };
            };

            ServerTool.Init();
        });

        WS.DOMload(Editor.Init);
			
		</script>

    <style type="text/css">
        body
        {
            background-color: #fff;
        }
        #VersionHistory
        {
            z-index: 11111;
            position: fixed;
            left: 40%;
            top: 40%;
            background-color: white;
            border: solid 1px red;
            width: 200px;
            height: 200px;
            opacity: 1;
        }
        #VersionHistory .keyAr
        {
            color: navy;
            cursor: pointer;
        }
        #VersionHistory .keyAr:hover
        {
            font-weight: bold;
        }
        .CodeMirror
        {
            line-height: 1.2em;
            font-size: 14px;
            font-family: monospace;
            height: 100%;
        }
        .CodeMirror-scroll
        {
        }
        .CodeMirror-lines
        {
            padding: .4em;
        }
        .CodeMirror-dialog
        {
            position: fixed;
            top: 100px;
            background: white;
            border: solid 1px black;
            opacity: 1;
            padding: 110px10px;}
        .CodeMirror-selected
        {
            background-color: #afe !important;
        }
        span.CodeMirror-matchingbracket
        {
            background: #ff5;
        }
        .cm-matchhighlight
        {
            background-color: #af5;
        }
        #hkHint
        {
            position: absolute;
            top: 0;
            right: 0;
            background: rgba(255, 255, 255, 0.6);
            z-index: 100;
            border: solid 1px #ccc;
            border-radius: 10px;
            padding: 10px;
            width: 20%;
        }
        #hkHint h2
        {
            font-size: 20px;
            margin: 2px;
        }
        #hkHint .hot-key
        {
            margin-bottom: 5px;
        }
        #hkHint .key-combination
        {
            font-weight: bold;
            display: block;
            padding-bottom: 2px;
        }
        .header.toolbar .menuitem.disabled
        {
            background-color: red;
        }
        #Notify
        {
            background-color: white;
            border: 1px solid navy;
            border-radius: 10px 10px 10px 10px;
            cursor: default;
            font-size: 16px;
            height: 300px;
            text-align: left;
            width: 8%;
            opacity: 0.5;
            position: fixed;
            top: 1%;
            right: 1%;
            z-index: 20;
            padding: 7px;
            font-size: 12px;
            overflow: hidden;
        }
        #Notify .event
        {
            color: #333;
        }
        #Notify .event.first
        {
            background-color: yellow;
        }
        #Notify .event.error
        {
            color: red;
        }
        #ServerToolBtn:active
        {
            border: 1px solid green;
        }
        #ServerToolBtn.new
        {
            background-color: gray;
        }
        #ServerToolBtn.working
        {
            background-color: green;
        }
        #ServerToolBtn.exited
        {
            background-color: purple;
        }
        #ServerToolBtn.error
        {
            background-color: red;
        }
    </style>
</head>
<body>
    <div id='Notify'>
    </div>
    <div id='hkHint' class='invisible' onclick="this.hide();">
        <h2>
            Список новых фишек</h2>
        <hr />
        <ul>
            <li>Автозакрывание тагов</li>
            <li>Подсветка похожих выделенных слов</li>
            <li>Улучшено форматирование JS</li>
            <li>Поиск и замена</li>
            <li>Что-то еще, не помню что :)</li>
            <li>Исправлен глюк с выделением</li>
            <li>Исправлен глюк с длинной строкой</li>
            <li>Исправлен глюк с отменой</li>
            <li>Исправлен глюк с позицией воода</li>
            <li>Исправлен глюк с форматированием JS</li>
        </ul>
        <h2>
            Список горячих клавиш</h2>
        (работает только в Firefox)
        <hr />
        <div class='hot-key'>
            <span class='key-combination'>Shift + Tab </span>Переформатировать выделенный текст
            (отступы)
        </div>
        <div class='hot-key'>
            <span class='key-combination'>Ctrl + S </span>Сохранить
        </div>
        <div class='hot-key'>
            <span class='key-combination'>Ctrl + F, Ctrl + S, Ctrl + R </span>Найти текст\ (Следующий)
            \ (Предыдущий)
        </div>
        <div class='hot-key'>
            <span class='key-combination'>Ctrl + A </span>Выделить весь файл
        </div>
        <div class='hot-key'>
            <span class='key-combination'>Ctrl + X, Ctrl + C, Ctrl + V </span>Буфер обмена
        </div>
        <div class='hot-key'>
            <span class='key-combination'>Ctrl + Z, Ctrl + Shift + Z </span>Отменить\Вернуть
        </div>
        <div class='hot-key'>
            <span class='key-combination'>Ctrl + Пробел </span>Автодополнение (в доработке)
        </div>
    </div>
    <include url='http://services.web-manufacture.net/ui/Toolbars.htm'></include>
    <include url='http://services.web-manufacture.net/ui/FrameWin.htm'></include>
    <div id='Toolbar' class="header toolbar">
        <div class="menuitem save" tooltip="Сохранить" icon="http://system.web-manufacture.net/Images/save-mini.png"
            onclick="Editor.SaveFile();" style="background-image: url(http://system.web-manufacture.net/Images/save-mini.png);
            background-position: 50% 50%; background-repeat: no-repeat no-repeat;">
        </div>
        <div class="menuitem save history" tooltip="История сохранений" icon="http://cdn1.iconfinder.com/data/icons/softwaredemo/PNG/32x32/Hourglass.png"
            onclick="Editor.ShowHistory();" style="background-image: url(http://cdn1.iconfinder.com/data/icons/softwaredemo/PNG/32x32/Hourglass.png);
            background-position: 50% 50%; background-repeat: no-repeat no-repeat;">
        </div>
        <div class="menuitem reload" tooltip="Перегрузить файл" icon="http://cdn1.iconfinder.com/data/icons/humility-icons-MERGE/24x24/stock/gtk-refresh.png"
            onclick="Editor.Reload();" style="background-image: url(http://cdn1.iconfinder.com/data/icons/humility-icons-MERGE/24x24/stock/gtk-refresh.png);
            background-position: 50% 50%; background-repeat: no-repeat no-repeat;">
        </div>
        <div class="separator">
        </div>
        <div class="menuitem color" style="background-size: 48px; background-image: url(http://system.web-manufacture.net/Images/color.png);
            background-position: 50% 50%; background-repeat: no-repeat no-repeat;" tooltip="Палитра"
            icon="http://system.web-manufacture.net/Images/color.png" onclick="if (window.CPalette) CPalette.Show(); else M.LoadModule('http://system.web-manufacture.net/ColorPalette.htm');">
        </div>
        <div class="separator">
        </div>
        <div class="menuitem" tooltip="RUN" icon="http://system.web-manufacture.net/Images/exec.png"
            onclick="window.open('system.index.htm?url=' + encodeURIComponent(Editor.GetFileUrl()));">
        </div>
        <div class="menuitem" tooltip="Запустить" icon="http://system.web-manufacture.net/Images/emblem-system.png"
            onclick="Editor.RunFile();" style="background-image: url(http://system.web-manufacture.net/Images/emblem-system.png);
            background-position: 50% 50%; background-repeat: no-repeat no-repeat;">
        </div>
        <div class="separator">
        </div>
        <!--
<div class="menuitem" tooltip="Restart on Server" icon="http://cdn1.iconfinder.com/data/icons/UltimateGnome/32x32/apps/gnome-session-reboot.png" onclick="Editor.ServerRestart();">
</div>	
<div class="menuitem" tooltip="RUN on Server" icon="http://cdn1.iconfinder.com/data/icons/SUPERVISTA/security/png/48/status.png" onclick="Editor.ServerRun();">
</div>	
<div class="menuitem" tooltip="Stop on Server" icon="http://cdn1.iconfinder.com/data/icons/CrystalClear/32x32/actions/exit.png" onclick="Editor.ServerStop();">
</div>
-->
        <div class="menuitem" tooltip="Open log Window" icon="http://cdn1.iconfinder.com/data/icons/CrystalClear/32x32/apps/xconsole.png"
            onclick="Editor.OpenLogWindow();">
        </div>
        <div class="menuitem" id='ServerToolBtn' class='server-tool' tooltip="ServerTool"
            icon='http://cdn2.iconfinder.com/data/icons/stilllife/48x48/apps/gnome-server-config.png'>
        </div>
        <div class="separator">
        </div>
        <input id='urlBar' type='text' />
        <div class='menuitem' tooltip='Go URL' icon='http://cdn1.iconfinder.com/data/icons/snowish/48x48/actions/forward.png'
            onclick='Editor.GoUrl(DOM("#urlBar").value, event.ctrlKey);'>
        </div>
        <div class='menuitem' tooltip='Go URL ALL' icon='http://cdn1.iconfinder.com/data/icons/snowish/48x48/actions/finish.png'
            onclick='Editor.GoUrlAll(DOM("#urlBar").value, event.ctrlKey);'>
        </div>
        <div class='menuitem' tooltip='Go URL in new window' icon='http://cdn3.iconfinder.com/data/icons/snowish/48x48/actions/document-new.png'
            onclick='Editor.GoUrl(DOM("#urlBar").value, true);'>
        </div>
        <div class="status">
        </div>
    </div>
    <div id='VersionHistory' class='invisible' onclick="this.hide();">
    </div>
</body>
</html>
