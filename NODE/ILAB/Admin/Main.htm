<!DOCTYPE html>
<html>
	<head>
		<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
		<link type='text/css' rel='stylesheet' href="http://Services.web-manufacture.net/Styles/System.default.css" />
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Utils.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/DOM.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Url.js"></script>
		<script type="text/javascript" src="http://services.web-manufacture.net/Base/v1.3/Net.js"></script>
		
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Events.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Log.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Ajax.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Jasp.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Modules.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/ui.js"></script>
		
		<script type="text/javascript" src="http://web-manufacture.net:8000/JSONEditor.js"></script>
		
		<title>Конфигурация сервера</title>
		
		<script key="TextEditor" type="text/javascript">
			
			Notify = {};
			
			Notify.Show = function (message) {
				var nf = DOM("#Notify");
				var ev = nf.div(".event.first", (new Date()).formatTime() + " " + message);
				nf.show();
				nf.ins(ev);
				Notify.setTimeout();
			};
			
			Notify.Error = function (error) {
				var nf = DOM("#Notify");
				var ev = nf.div(".event.error.first", (new Date()).formatTime() + " " + error);
				nf.show();
				nf.ins(ev);
				Notify.setTimeout();
			};
			
			Notify.setTimeout = function () {
				if (Notify.timeout) {
					window.clearTimeout(Notify.timeout);
				}
				Notify.timeout = window.setTimeout(Notify.clearFirst, 3000);
			};
			
			Notify.clearFirst = function () {
				DOM.all("#Notify .event.first").del(".first");
			};
			
			function XH() {
				var xmlhttp;
				xmlhttp = new XMLHttpRequest();
				return xmlhttp;
			};
			
			ConfManager = {};
			
			ConfManager.Init = function(){
				//Server = new NodeServer();
				//Server = new KLabNet.GetTunnel();
				ConfManager.GetLogs();
				ConfManager.ShowConfigs();
				ConfManager.ShowMap();
			};
			
			ConfManager.GetLogs = function(){
				if (ConfManager.lastpoll){
					Net.all('/logs/?date={"$gt":' + ConfManager.lastpoll + '}', ConfManager.LogsReady);
				}
				else{
					Net.all("/logs/*", ConfManager.LogsReady);
				}
				//var url = new Url("/");
				//url.host = url.host.replace(url.hostname, "logs." + url.hostname);
				//url.hostname = "logs." + url.hostname;
				//Net.all("logs", ConfManager.LogsLoaded);
				//Net.all("logs", ConfManager.LogsReady);
			};
			
			ConfManager.ShowConfigs = function(){
				var url = new Url("/");
				//url.host = url.host.replace(url.hostname, "config." + url.hostname);
				//url.hostname = "config." + url.hostname;
				//Server.get(url + "", ConfManager.ConfigsLoaded);
				var sync = new Sync();
				M.WaitModule("http://services.web-manufacture.net/ui/uiutils.htm", sync.check());
				//Server.all(url + 'configs/*', sync.add(ConfManager.ConfigsLoaded));
				Net.all('configs/*', sync.add(ConfManager.ConfigsLoaded));
			};
			
			
			
			///____________________________
			
			//ConfManager.GetLogs = function(){
			//	if (ConfManager.lastpoll){
			//		tunnel.all('/logs/?date={"$gt":' + ConfManager.lastpoll + '}', ConfManager.LogsReady);
			//	}
			//	else{
			//		tunnel.all("/logs/*", ConfManager.LogsReady);
			//	}
			//};
			ConfManager.LogsReady = function(result){
				result = JSON.parse(result);
				var lastdate = 0;
				for (var i = 0; i < result.length; i++){
					ConfManager.AddLog(result[i]);
					if (result[i].date > lastdate) lastdate = result[i].date;
				}
				if (lastdate > 0) ConfManager.lastpoll = lastdate;
				window.setTimeout(ConfManager.GetLogs, 1000);
			};
			ConfManager.FormatError = function(error){
				try{
					if (typeof (error) != "object") {
						error = JSON.parse(error);
					}
					var errorDiv = DOM.div();
					var stack = error.stack.split('\n');
					for (var i = 0; i < stack.length; i++){
						var line = stack[i];
						line = line.replace(/</g, "&lt;").replace(/>/g, "&gt;");
						line = line.replace(/\s?at\s/, "");
						var sl = errorDiv.div(".stack-line");
						var iofaddr = line.indexOf("(");
						if (iofaddr >= 0){
							line = line.replace(/\((\w):\\/, "($1\\");
							var mod = /\(([^:]+):(\d+):(\d+)\)/.exec(line);
							line = line.substr(0, iofaddr);
							sl.div(".module-name.stack-part.stack-part-prefix", mod[1] + " : " + mod[2] + "(" + mod[3] + ")");
							//sl.div(".row.stack-part.stack-part-prefix", mod[2] + "(" + mod[3] + ")");
							//sl.div(".col.stack-part.stack-part-prefix", mod[3]);
							sl.div(".function.stack-part", line);
						}
						else{
							sl.set(null, line);
						}
					}
				}
				catch (ex){
					return "Error parsing object: " + error;
				}
				return errorDiv.innerHTML;
			};
			
			ConfManager.AddLog = function(message){
				logDiv = DOM("#Logs").get('.logs');
				var dateOfLog = new Date(message.date);
				var logType = message.type;
				var text = message.text ? message.text : (message.message ? message.message : JSON.stringify(message));
				var newLogDiv = DOM.div('.log-item.' + logType);
				if (dateOfLog < ConfManager.startDate) newLogDiv.add(".old");
				newLogDiv.div(".datetime", dateOfLog.formatTime());
				if (logType == "error"){
					text = ConfManager.FormatError(text);
				};
				newLogDiv.div(".message", text);
				if (logDiv.firstChild){
					logDiv.ins(newLogDiv);
				}else{
					logDiv.add(newLogDiv);
				};
			}; 
			
			///_____________________________
			
			
			
			
			ConfManager.ConfigsLoaded = function(result, status){
				if (status == 200){
					
					ConfManager.DisplayConfigs(JSON.parse(result));
					//DOM("#Config").add(" " + result);
				}else{
					Notify.Error("Logs not loaded: " + status);	
				};		
			};
			
			ConfManager.DisplayConfigs = function(result){
				var configsSorted = result.sort(ConfManager.SortByPath);
				for (var i=0; i < configsSorted.length; i++){
					ConfManager.DisplayOneConfig(configsSorted[i]);
					/*
					var configPath = configsSorted[i].path;
					var configID = configsSorted[i]._id;
					
					delete configsSorted[i].path;
					delete configsSorted[i]._id;
					var pathObj = DOM.formatJSON(JSON.stringify(configsSorted[i]));
					
					configsSorted[i].path = configPath;
					configsSorted[i]._id = configID;
					
					pathObj.AttrProperty('key');							 
					pathObj.id = 'id' + configID;
					pathObj.key = configID;
					var pathDiv = DOM.div('.path', configPath);
					pathObj.ins(pathDiv).onclick = ConfManager.ConfigEditor;
					pathObj.linked = configsSorted[i];
					DOM("#Config").add(pathObj);//.linked = configsSorted[i]);
*/
				};
			};
			
			ConfManager.DisplayOneConfig = function(configObj){
				var configDiv = DOM.get('.config-line.prototype').clone();
				configDiv.linked = configObj;
				configDiv.get('.config-path').div('.path', configObj.path);
				
				var configObjToDisplay = {};
				for (var prop in configObj){
					if (prop == '_id' || prop == 'path') continue;
					configObjToDisplay[prop] = configObj[prop];
				};
				//delete configObjToDisplay._id;
				//delete configObjToDisplay.path;
					
				configDiv.get('.config-json').add(DOM.formatJSON(JSON.stringify(configObjToDisplay)));
				var buttons = configDiv.get('.config-buttons');
				buttons.get('.edit-config').onclick = ConfManager.ConfigEditor;
				buttons.get('.delete-config').onclick = function(){
					ConfManager.SaveConfigs({_id: configObj._id});
				};
				configDiv.AttrProperty('key');							 
				configDiv.id = 'id' + configObj._id;
				configDiv.key = configObj._id;
				DOM("#Config").add(configDiv);
				
				if (configObj.configType == "module"){
					ConfManager.DisplayModule(configObj);
				};
				/*
				var configPath = configObj.path;
				var configID = configObj._id;
				
				delete configObj.path;
				delete configObj._id;
				var pathObj = DOM.div('.config-JSON', DOM.formatJSON(JSON.stringify(configObj)));
				
				configObj.path = configPath;
				configObj._id = configID;
				
				pathObj.AttrProperty('key');							 
				pathObj.id = 'id' + configID;
				pathObj.key = configID;
				var pathDiv = DOM.div('.path', configPath);
				pathObj.ins(DOM.get('.btn-ira.delete-config.prototype').clone()).onclick = ConfManager;
				pathObj.ins(DOM.get('.btn-ira.edit-config.prototype').clone()).onclick = ConfManager.ConfigEditor;
				
				pathObj.ins(pathDiv)//.onclick = ConfManager.ConfigEditor;
				pathObj.linked = configObj;
				DOM("#Config").add(pathObj);
*/
			};
			
			ConfManager.ConfigEditor = function(configDiv){
				var configsDiv = DOM.get('#Config');
				configsDiv.all('.config-line').del('.selected');
				configsDiv.all('.edit-config-div').hide();
				configsDiv.all('.js-entity').show();
				
				var configDiv = this.get('^.config-line');
				
				
				var configObj = configDiv.linked;
				//var editForm = DOM.get('.config-edit-form');
				//editForm.get('.config-edit-form-container').all('.config-property').del();
				//editForm.show();
				configDiv.add('.selected');
				
				//JSONEditor.Init(obj, DOM.get('.config-edit-form'), ConfManager.SaveConfigs);
				configDiv.get('.config-string').value = JSON.stringify(configObj);
				
				
				configDiv.get('.js-entity').hide();
				
				
				configDiv.get('.edit-config-div').show();
				configDiv.get('.save-config-string').onclick = function(){
					ConfManager.SaveConfigs(JSON.parse(configDiv.get('.config-string').value));
				};
				configDiv.get('.cansel-config-string').onclick = function(){
					var configsDiv = DOM.get('#Config');
					configsDiv.all('.config-line').del('.selected');
					configsDiv.all('.edit-config-div').hide();
					configsDiv.all('.js-entity').show();
				};
				
			};
			ConfManager.CreateNewConfig = function(){
				ConfManager.SelectConfigsTab(DOM.get('#ConfigBTN'));
				
				var configsDiv = DOM.get('#Config');
				configsDiv.all('.config-line').del('.selected');
				configsDiv.all('.edit-config-div').hide();
				configsDiv.all('.js-entity').show();
				
				var configDiv = DOM.get('.config-line.prototype').clone();
											 
				DOM("#Config").add(configDiv);
				
				//configDiv.get('.config-string').value = JSON.stringify({path:'', collection:''});
				configDiv.get('.config-buttons').hide();
				configDiv.get('.edit-config-div').show();
				configDiv.get('.save-config-string').onclick = function(){
					var a = configDiv.get('.config-string').value;
					//var b = JSON.parse(a);
					ConfManager.SaveConfigs(JSON.parse(configDiv.get('.config-string').value));
					configDiv.del();
				};
				configDiv.get('.cansel-config-string').onclick = function(){
					var configsDiv = DOM.get('#Config');
					configsDiv.all('.config-line').del('.selected');
					configsDiv.all('.edit-config-div').hide();
					configsDiv.all('.js-entity').show();
					configsDiv.all('.config-buttons').show();
					configDiv.del();
				};
				
				//ConfManager.ConfigEditor(configDiv);
				
				//return;
				//DOM.all('#Config .js-entity').del('.selected');
				//var obj = {path:'', collection:''};
				//var editForm = DOM.get('.config-edit-form');
				//editForm.show();
				//JSONEditor.Init(obj, editForm, ConfManager.SaveConfigs);
			};
			
			
			ConfManager.SaveConfigs = function(obj){
				
				var configsDiv = DOM.get('#Config');
				configsDiv.all('.config-line').del('.selected');
				configsDiv.all('.edit-config-div').hide();
				configsDiv.all('.js-entity').show();
				
				//if (!modified){
				//	ConfManager.DisplayOneConfig(obj);
				//	return;
				//};
				
				var id = obj._id;
				var path = obj.path;
				delete obj._id;
				delete obj.path;
				
				function isEmpty(obj) {
					for (var key in obj) {
						return false;
					};
					return true;
				};
				
				if (id && !path && isEmpty(obj)){
					if (!confirm('delete?')) return;
					Net.del(Url.Resolve('configs', {id:id}), function(rt, stat){
						configsDiv.get('#id' + id).del();
						//DOM.get('#Config config-line#id' + id).del();
						ConfManager.SelectConfigsTab();
						var tabButton = DOM.get('#Tabs').get('[key="' + id + '"]');
						if (tabButton){
							DOM.get('#id' + tabButton.get('@tabID')).del();
							tabButton.del();
						}
						//alert('config ' + id + ' ' + ' was deleted');
					});
					return;
				};
				if (id){
					Net.set(Url.Resolve('configs', {id:id, path:path}), JSON.stringify(obj), function(rt, stat){
						if (rt){
							obj._id = id;
							obj.path = path;
							
							ConfManager.ShowChanges(obj);
						};
					});
					return;
				}else{
					Net.add(Url.Resolve('configs', {path:path}), JSON.stringify(obj), function(rt, stat){
						if (rt)	ConfManager.DisplayOneConfig(JSON.parse(rt));
					});
					return;
				};
			};
			
			ConfManager.ShowChanges = function(configObj){
				/*
				var configDiv = DOM.get('.config-line.prototype').clone();
				configDiv.linked = configObj;
				configDiv.get('.config-path').div('.path', configObj.path);
				configDiv.get('.config-json').add(DOM.formatJSON(JSON.stringify(configObj)));
				var buttons = configDiv.get('.config-buttons');
				buttons.get('.edit-config').onclick = ConfManager.ConfigEditor;
				buttons.get('.delete-config').onclick = ConfManager;
				configDiv.AttrProperty('key');							 
				configDiv.id = 'id' + configObj._id;
				configDiv.key = configObj._id;
				DOM("#Config").add(configDiv);
*/
				
				
				
				var configDiv = DOM.get('#Config').get('#id' + configObj._id);
				configDiv.linked = configObj;
				configDiv.get('.js-entity').del();
				configDiv.get('.config-json').add(DOM.formatJSON(JSON.stringify(configObj)));
				
				/*			
				var configPath = configObj.path;
				var configID = configObj._id;
				
				delete configObj.path;
				delete configObj._id;
				
				var configDivNew = DOM.formatJSON(JSON.stringify(configObj));
				DOM.get('#Config').insertBefore(configDivNew, configDiv);
				
				configDiv.del();
				
				configObj.path = configPath;
				configObj._id = configID;
				
				configDivNew.AttrProperty('key');							 
				configDivNew.id = 'id' + configID;
				configDivNew.key = configID;
				
				var pathDiv = DOM.div('.path', configPath);
				configDivNew.ins(pathDiv).onclick = ConfManager.ConfigEditor;
				configDivNew.linked = configObj;
				
*/
				if (configObj.configType == "module"){
					var tabButton = DOM.get('#Tabs').get('[key="' + configObj._id + '"]');
					
					DOM.get('#id' + tabButton.get('@tabID')).del();
					
					var tabDivNew = DOM.div('.tab-div-container',DOM.formatJSON(JSON.stringify(configObj), true));
					tabDivNew.add('.block');
					tabDivNew.linked = configObj;
					tabDivNew.id = 'id' + tabButton.get('@tabID');
					DOM.add(tabDivNew);
					if (DOM.get('#ConfigBTN').is('.active')) tabDivNew.hide();
					tabDivNew.onclick = ConfManager.ModuleEditor;
			
				};

			};
			
			ConfManager.ShowMap = function(){
				var sync = new Sync();
				M.WaitModule("http://services.web-manufacture.net/ui/uiutils.htm", sync.check());
				Net.get('map/', sync.add(function(rt) {
					var mapObj = DOM.formatJSON(rt, true);
					DOM.get('#Map').add(mapObj);
				}));
			};
			
			ConfManager.DisplayModule = function(obj){
				var tabButton = DOM.get('#Tabs').div('.tabs-buttons', obj.path);
				var tabID = Math.round(Math.random() * 1000000);
				tabButton.set('@tabID', tabID);
				tabButton.AttrProperty('key');
				tabButton.key = obj._id
				tabButton.onclick = ConfManager.SelectTab;
				
				var tabDiv = DOM.div('.tab-div-container',DOM.formatJSON(JSON.stringify(obj), true));
				tabDiv.linked = obj;
				tabDiv.add('.block');
				tabDiv.id = 'id' + tabID;
				tabDiv.add('@path', '' + obj.path);
				tabDiv.hide();
				
				DOM.add(tabDiv);	
				tabDiv.onclick = ConfManager.ModuleEditor;
			};
			
			ConfManager.ModuleEditor = function(){
				DOM.all('#Config .js-entity').del('.selected');
				var obj = this.linked;
				var editForm = DOM.get('.config-edit-form');
				editForm.show();
				
				JSONEditor.Init(obj, DOM.get('.config-edit-form'), ConfManager.SaveConfigs);
			};
			
			ConfManager.SelectTab = function(){
				DOM.get('.config-edit-form').hide();
				DOM.all('#Tabs .tabs-buttons').del('.active');
				this.add('.active');
				var blockName = this.get('@tabID');
				DOM.all('.block').hide();
				DOM.get('#id' + blockName).show();
			};
			
			ConfManager.SelectLogsTab = function(btn){
				DOM.get('.config-edit-form').hide();
				DOM.all('#Tabs .tabs-buttons').del('.active');
				btn.add('.active');
				DOM.all('.block').hide();
				DOM.get('#Logs').show();	
			};
			
			ConfManager.SelectConfigsTab = function(btn){
				DOM.all('#Tabs .tabs-buttons').del('.active');
				if (btn) btn.add('.active');
				DOM.all('.block').hide();
				DOM.get('#Config').show();
			};
			
			ConfManager.SelectMapTab = function(btn){
				DOM.get('.config-edit-form').hide();
				DOM.all('#Tabs .tabs-buttons').del('.active');
				btn.add('.active');
				DOM.all('.block').hide();
				DOM.get('#Map').show();	
			};
			
			ConfManager.SortByPath = function(a, b){
				return a.path > b.path ? 1 : -1;
			};
			
			WS.DOMload(ConfManager.Init);
		
			
		</script><style type="text/css">
		body{
			background-color: #fff;  				
		} 
		
		.block {
			background: rgba(255, 255, 255, 0.6);
			border: solid 1px #ccc;
			border-radius: 10px;
			padding: 10px;
			width: 100%;
			height: auto;
		}
		
		.block h2{
			font-size:20px;
			margin: 2px;
		}
		
		
		.header.toolbar .menuitem.disabled{
			background-color: red;	
		}
		
		#Notify{
			background-color: white;
			border: 1px solid navy;
			border-radius: 10px 10px 10px 10px;
			cursor: default;
			font-size: 16px;
			height: 300px;
			text-align: left;
			width: 8%;
			opacity: 0.5;
			position: fixed;
			top: 1%;
			right: 1%;
			z-index: 20;
			padding: 7px;
			font-size: 12px;
			overflow: hidden;
		}
		
		#Notify .event{
			color: #333;
		}
		
		#Notify .event.first{
			background-color:yellow;
		}
		
		#Notify .event.error{
			color: red;
		}
		

		#Logs .logs{
			width: 800px;
			height: 150px;
			overflow-y: auto;
		}
		
		#Logs .logs {
			display: block;
			font-family: monospace;
			font-size: 12px;
			padding: 2px;
			text-align: left;
			width: 800px;
			height: 150px;
			overflow-y: auto;	
		}
		#Logs .logs .log-item {
			clear: both;
		}
		#Logs .logs .log-item.old:first-child {
			margin-top: 10px;
		}
		#Logs .logs .log-item.old {
			color: #666666;
		}
		#Logs .logs .log-item div {
			float: left;
			padding-left: 10px;
		}
		#Logs .logs .log-item.error .datetime {
			color: red;
		}
		#Logs .logs .log-item.error .message .stack-line:first-child {
			color: red;
		}
		#Logs .logs .log-item.error .stack-line {
			clear: both;
			float: none;
		}
		#Logs .logs .log-item.error .stack-line .stack-part-prefix {
			text-align: left;
			width: 150px;
		} 
		
		#Config .add-new-config-button{
			width: 16px;
			height: 16px;
		}
		
		#Config .config-line{
			clear: both;
			min-height: 20px;
		}
		
		#Config .config-line.selected{
			background-color: silver;
			height: 26px;	
		}
		
		#Config .config-line .config-path .path{
			width: 40px;
			min-height: 20px;
			color: black;
			font-size: 120%;
		}
		
		#Config .config-line .config-path{
			float: left;
			min-height: 20px;
			width: 10%;
		}
		#Config .config-line .config-buttons{
			float: left;
			min-height: 20px;
			width: 42px;
		}
		#Config .config-line .config-button{
			width: 16px;
			height: 16px;
			float: left;
			margin-left: 5px;
			margin-top: 2px;
			cursor: pointer;
		}
		
		#Config .config-line .config-json{
			float: left;
			min-height: 20px;
			width: 85%;
		}
		#Config .config-line .config-json .edit-config-div .config-string{
			float: left;
			margin-left: 20px;
			min-height: 20px;
			width: 90%;
		}
		
		.config-edit-form{
			max-width: 250px;
			background-color: GhostWhite;
			border: 3px outset grey;
		}
		.config-edit-form-container .config-property{
			display: block;
			clear: right;
			float:right;
			
			
		}
		
		.config-edit-form-container .config-property .config-property-name{
			width: 100px;
			float: left;
			padding: 5px;
			text-align: right;
			overflow:hidden;
			text-overflow: ellipsis;
			white-space: nowrap;
		}
		.config-edit-form-container .config-property .config-property-name.new{
			border: 1px solid red;
			width:100px;
			height:20px;
			display:block;
		}
		
		.config-edit-form-container .config-property .config-property-value{
			width: 100px;
			float: left;
			margin: 5px;
			text-align: center;
			border: 1px solid navy;
			min-height: 20px;
			overflow:hidden;
			text-overflow: ellipsis;
			white-space: nowrap;
		}
		
		.config-property-name[contenteditable='true']{
			border: 1px solid red;
			margin: 5px;
			
			height:10px;
			
		}
		.buttons{
			
			text-align: center;
		}
		.btn-ira.save {
			border: 2px solid #467F71;
		}
		.btn-ira.cancel {
			border: 2px solid #E0E0E0;
		}
		.btn-ira.add {
			border: 2px solid #FFCA3B;
		}
		
		
		
		#Tabs.tabs{
			margin-top: 20px;
			height: 27px;
		}
		
		.tab{
			height: 100%; 
			border : solid 1px gray;
			width: 100%;
		}
		
		#Tabs .tabs-buttons{
			float: left;
			padding: 3px 10px;
			border-top : solid 1px gray;
			border-left : solid 1px gray;
			border-right : solid 1px gray;
			border-radius : 5px 5px 0px 0px;
			cursor: pointer;
		}
		
		
		#Tabs .tabs-buttons.active{
			background-color: yellow;
			margin-bottom: -1px;
		}
		

		
		
		</style>
	</head>
	<body>
		<include url='http://services.web-manufacture.net/UI/UiUtils.htm'></include>
		<div id="Notify">
		</div>
		<div id='serverVer'></div>
		<div class='tabs' id='Tabs'>
			<div class='tabs-buttons' id='LogBTN' onclick='ConfManager.SelectLogsTab(this)'>Логи</div>
			<div class='tabs-buttons' id='ConfigBTN' onclick='ConfManager.SelectConfigsTab(this)'>Конфиги</div>
			<div class='tabs-buttons' id='MapBTN' onclick='ConfManager.SelectMapTab(this)'>Карта</div>
		</div>
		<div class="block" id="Logs">
			<h2>Логи</h2>
			<div class='logs'></div>
		</div>
		
		<div class="block" id="Config">
			<h2>
				Конфиг
			</h2>
			<div class='add-new-config-button' onclick="ConfManager.CreateNewConfig()" icon="http://cdn3.iconfinder.com/data/icons/musthave/16/Add.png"></div>
		</div>
		
		<div class="block" id="Map">
			<h2>
				Карта
			</h2>
		</div>
		
		<div onclick="this.hide();" class="invisible" id="hkHint">
			<h2>
				Список новых фишек</h2>
			<hr>
			<ul>
				<li>Автозакрывание тагов</li>
				<li>Подсветка похожих выделенных слов</li>
				<li>Улучшено форматирование JS</li>
				<li>Поиск и замена</li>
				<li>Что-то еще, не помню что :)</li>
				<li>Исправлен глюк с выделением</li>
				<li>Исправлен глюк с длинной строкой</li>
				<li>Исправлен глюк с отменой</li>
				<li>Исправлен глюк с позицией воода</li>
				<li>Исправлен глюк с форматированием JS</li>
			</ul>
			<h2>
				Список горячих клавиш</h2>
			(работает только в Firefox)
			<hr>
			<div class="hot-key">
				<span class="key-combination">Shift + Tab </span>Переформатировать выделенный текст (отступы)
			</div>
			<div class="hot-key">
				<span class="key-combination">Ctrl + S </span>Сохранить
			</div>
			<div class="hot-key">
				<span class="key-combination">Ctrl + F, Ctrl + S, Ctrl + R </span>Найти текст\ (Следующий) \ (Предыдущий)
			</div>
			<div class="hot-key">
				<span class="key-combination">Ctrl + A </span>Выделить весь файл
			</div>
			<div class="hot-key">
				<span class="key-combination">Ctrl + X, Ctrl + C, Ctrl + V </span>Буфер обмена
			</div>
			<div class="hot-key">
				<span class="key-combination">Ctrl + Z, Ctrl + Shift + Z </span>Отменить\Вернуть
			</div>
			<div class="hot-key">
				<span class="key-combination">Ctrl + Пробел </span>Автодополнение (в доработке)
			</div>
		</div>
		
		<include url="http://services.web-manufacture.net/ui/Toolbars.htm"></include>
		
		<div class="header toolbar" id="Toolbar">
			<div onclick="ConfManager.CreateNewConfig();" icon="http://cdn1.iconfinder.com/data/icons//Human_O2_Grunge_by_Tutsii/32/text-x-log.png" tooltip="Логи" class="menuitem save">
				New config
			</div>
			<div onclick="ConfManager.ShowConfigs();" icon="http://cdn2.iconfinder.com/data/icons/stilllife/48x48/apps/gnome-server-config.png" tooltip="Конфиги" class="menuitem save">
			</div>
		</div>
		<div class='config-edit-form invisible'>
			<div class='config-edit-form-container'>	</div>
			<div class='buttons'>
				<div class='btn-ira save ' title='OK' > OK </div>
				<div class='btn-ira cancel ' title='Clear'> Cancel </div>
				<div class='btn-ira add' title='Add'> Add </div>
			</div>
			<div class='config-property prototype'>
				<div class='config-property-name' name='path'></div>
				<div class='config-property-value' contenteditable='true' name='path'></div>
				
			</div>	
		</div>
		
		<div class='add-new-config prototype' title='add new' > + </div>
		<div class='edit-config-div prototype'>
			<div class='config-string'></div>
			<div class='save-config-string btn-ira'>save</div>
		</div>
		<div class='config-line prototype'>
			<div class='config-path'></div>
			<div class='config-buttons'>
				<div class='edit-config config-button' title='edit config' icon='http://cdn3.iconfinder.com/data/icons/fatcow/16x16_0100/book_edit.png'></div>
				<div class='delete-config config-button' title='delete config' icon='http://cdn2.iconfinder.com/data/icons/oxygen/16x16/actions/edit-trash.png'></div>
			</div>
			<div class='config-json'>
				<div class='edit-config-div invisible'>
					<div class='save-config-string config-button' icon='http://cdn1.iconfinder.com/data/icons/silk2/disk.png'></div>
					<div class='cansel-config-string config-button' icon='http://cdn3.iconfinder.com/data/icons/lynx/16x16/actions/gtk-cancel.png'></div>
					<input class='config-string' type='text'>
				</div>
			</div>
		</div>
		
	</body>
</html>
